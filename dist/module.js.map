{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./module.ts","webpack:///./SeriesWrapper.ts","webpack:///./editor.ts","webpack:///./libLoader.ts","webpack:///../node_modules/scriptjs/dist/script.js","webpack:///./anno.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","__WEBPACK_EXTERNAL_MODULE__0__","_sdk","u","_SeriesWrapper","_editor","_libLoader","_anno","Plotly","PlotlyPanelCtrl","_super","$scope","$injector","$window","$rootScope","uiSegmentSrv","annotationsSrv","_this","this","annotations","AnnoInfo","seriesByKey","Map","seriesHash","seriesIsTimeseries","doResize","_lodash2","debounce","window","getComputedStyle","graphDiv","display","rect","getBoundingClientRect","layout","width","height","redraw","console","warn","deepCopyWithTemplates","obj","isArray","map","val","isString","templateSrv","replace","panel","scopedVars","isObject","copy_1","forEach","v","k","_hadAnno","initialized","defaultsDeep","defaults","cfg","pconfig","traces","a","events","loadPlotly","then","log","on","onRender","onDataReceived","onDataError","onResize","onDataSnapshotLoad","onRefresh","refresh","onInitEditMode","__extends","$inject","getCssRule","selectorText","styleSheets","document","idx","length","rules","cssRules","ruleIdx","rule","err","series","clear","render","otherPanelInFullscreenMode","editor","EditorHelper","addEditorTab","onConfigChanged","setTimeout","processConfigMigration","configVersion","plot_bgcolor","paper_bgcolor","autosize","margin","scene","is3d","zaxis","settings","old","show_1","markers","indexOf","lines","trace","show","version","onPanelInitialized","_updateTraceData","getProcessedLayout","xaxis","yaxis","tickangle","fixScale","scaleanchor","b","pad","type","mapping","isDate","title","range","timeSrv","timeRange","from","valueOf","to","labelStyle","color","style","font","_jquery2","parse","scale","toString","gridcolor","yaxis2","options","showLink","displaylogo","displayModeBar","modeBarButtonsToRemove","shapes","concat","react","data","points","pointNumber","ts","msg","x","toPrecision","y","appEvent","dashboard","formatDate","_moment2","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","found","fullData","Math","utc","setTime","Plots","purge","innerHTML","snapshot","dataList","finfo","autotrace","autotraceDataSeries","sidx","columns","error","Error","rows","sname","push","autotraceDataList","_updateAutoTraces","useRefID_1","targets","refId","String","fromCharCode","charCodeAt","SeriesWrapperTable","SeriesWrapperTableRow","target","SeriesWrapperSeries","getAllKeys","set","hchanged","updateMappings","selectTrace","traceIndex","annotationPromise","Promise","resolve","showAnnotations","getAnnotations","results","hasAnno","update","__addCopyPath","path","__set","dataWarnings","_updateTracesFromConfigs","cloneDeep","defaultTrace","is3D","isBar","tconfig","config","createTraceName","orientation","marker","barmarker","sizemin","sizemode","sizeref","color_option","colorscale","showscale","line","z","substring","text","force","zero","vals","toArray","Array","loadIfNecessary","res","link","scope","elem","attrs","ctrl","find","evt","mouse","templateUrl","size","dash","shape","symbol","visible","loadFromCDN","barmode","showlegend","legend","traceorder","family","dragmode","hovermode","showgrid","zeroline","rangemode","autotick","ticks","tick0","dtick","titlefont","MetricsPanelCtrl","SeriesWrapper","setFirst","first","isNumber","_typeof","getKey","count","datapoints","arr","table","index","col","row","h","_module","REMOVE_KEY","axis","defaultMappings","time","changed","onUpdateAxis","label","segment","deepClone","newSegment","updateSegMapping","updateTrace","fake","opts","html","createTrace","removeCurrentTrace","splice","getSeriesSegs","withRemove","reject","onAxisSeriesChanged","getTextSegments","onTextMetricChanged","sss","seg","getColorSegments","onColorChanged","onSymbolChanged","getSymbolSegs","segs","loaded","wasCDN","isFull","_scriptjs2","needsFull","url","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","scriptpath","urlArgs","doc","head","getElementsByTagName","f","readyState","onreadystatechange","ids","delay","scripts","every","ar","fn","j","el","$script","paths","idOrDone","optDone","idOrDoneIsDone","done","id","join","queue","loopFn","item","list","callback","dset","split","each","test","loading","createElement","onload","onerror","async","src","insertBefore","lastChild","shift","str","ready","deps","req","missing","dep","assign","arguments","apply","hoverinfo","annotation","iconColor","xref","yref","x0","y0","x1","y1","layer","fillcolor","opacity"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/* -*- Mode: typescript; indent-tabs-mode: nil; typescript-indent-level: 2 -*- */\n\n///<reference path=\"../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\n\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport $ from 'jquery';\n\nimport {\n  SeriesWrapper,\n  SeriesWrapperSeries,\n  SeriesWrapperTable,\n  SeriesWrapperTableRow,\n} from './SeriesWrapper';\nimport {EditorHelper} from './editor';\n\nimport {loadPlotly, loadIfNecessary} from './libLoader';\nimport {AnnoInfo} from './anno';\nimport {Axis} from 'plotly.js';\n\nlet Plotly: any; // Loaded dynamically!\n\nclass PlotlyPanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'partials/module.html';\n  static configVersion = 1; // An index to help config migration\n\n  initialized: boolean;\n  //$tooltip: any;\n\n  static defaultTrace = {\n    mapping: {\n      x: null,\n      y: null,\n      z: null,\n      text: null,\n      color: null,\n      size: null,\n    },\n    show: {\n      line: true,\n      markers: true,\n    },\n    settings: {\n      line: {\n        color: '#005f81',\n        width: 6,\n        dash: 'solid',\n        shape: 'linear',\n      },\n      marker: {\n        size: 15,\n        symbol: 'circle',\n        color: '#33B5E5',\n        colorscale: 'YlOrRd',\n        sizemode: 'diameter',\n        sizemin: 3,\n        sizeref: 0.2,\n        line: {\n          color: '#DDD',\n          width: 0,\n        },\n        showscale: false,\n      },\n      barmarker: {\n        color: '#33B5E5',\n        width: 1,\n      },\n      color_option: 'ramp',\n    },\n  };\n\n  static yaxis2: Partial<Axis> = {\n    title: 'Annotations',\n    type: 'linear',\n    range: [0, 1],\n    visible: false,\n  };\n\n  static defaults = {\n    pconfig: {\n      loadFromCDN: false,\n      showAnnotations: true,\n      fixScale: '',\n      traces: [PlotlyPanelCtrl.defaultTrace],\n      settings: {\n        type: 'scatter',\n        displayModeBar: false,\n        orientation: 'v',\n        autotrace: false,\n      },\n      layout: {\n        barmode: 'group',\n        showlegend: false,\n        legend: {\n          orientation: 'h',\n          traceorder: 'normal',\n          font: {\n            family: 'Roboto, Helvetica, Arial, sans-serif',\n            size: 11,\n          },\n        },\n        dragmode: 'lasso', // (enumerated: \"zoom\" | \"pan\" | \"select\" | \"lasso\" | \"orbit\" | \"turntable\" )\n        hovermode: 'closest',\n        font: {\n          family: 'Roboto, Helvetica, Arial, sans-serif',\n          size: 10.8,\n        },\n        xaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'auto',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" ),\n          tickangle: 0,\n          autotick: true,\n          ticks: 'outside',\n          tick0: 0,\n          dtick: 1,\n          titlefont: {\n            family: 'Roboto, Helvetica, Arial, sans-serif',\n            size: 12,\n          },\n        },\n        yaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'linear',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" ),\n          tickangle: 0,\n          autotick: true,\n          ticks: 'outside',\n          tick0: 0,\n          dtick: 1,\n          titlefont: {\n            family: 'Roboto, Helvetica, Arial, sans-serif',\n            size: 12,\n          },\n        },\n        zaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'linear',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" ),\n          tickangle: 0,\n          autotick: true,\n          ticks: 'outside',\n          tick0: 0,\n          dtick: 1,\n          titlefont: {\n            family: 'Roboto, Helvetica, Arial, sans-serif',\n            size: 12,\n          },\n        },\n      },\n    },\n  };\n\n  graphDiv: any;\n  annotations = new AnnoInfo();\n  series: SeriesWrapper[];\n  seriesByKey: Map<string, SeriesWrapper> = new Map();\n  seriesHash = '?';\n  seriesIsTimeseries = true;\n\n  traces: any[]; // The data sent directly to Plotly -- with a special __copy element\n  layout: any; // The layout used by Plotly\n\n  mouse: any;\n  cfg: any;\n\n  // For editor\n  editor: EditorHelper;\n  dataWarnings: string[]; // warnings about loading data\n\n  /** @ngInject **/\n  constructor(\n    $scope,\n    $injector,\n    $window,\n    private $rootScope,\n    public uiSegmentSrv,\n    private annotationsSrv\n  ) {\n    super($scope, $injector);\n\n    this.initialized = false;\n\n    //this.$tooltip = $('<div id=\"tooltip\" class=\"graph-tooltip\">');\n\n    // defaults configs\n    _.defaultsDeep(this.panel, PlotlyPanelCtrl.defaults);\n\n    this.cfg = this.panel.pconfig;\n\n    this.traces = [];\n\n    // ?? This seems needed for tests?!!\n    if (!this.events) {\n      return;\n    }\n\n    loadPlotly(this.cfg).then(v => {\n      Plotly = v;\n      console.log('Plotly', v);\n\n      // Wait till plotly exists has loaded before we handle any data\n      this.events.on('render', this.onRender.bind(this));\n      this.events.on('data-received', this.onDataReceived.bind(this));\n      this.events.on('data-error', this.onDataError.bind(this));\n      this.events.on('panel-size-changed', this.onResize.bind(this));\n      this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n      this.events.on('refresh', this.onRefresh.bind(this));\n\n      // Refresh after plotly is loaded\n      this.refresh();\n    });\n\n    // Standard handlers\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitialized.bind(this));\n  }\n\n  getCssRule(selectorText): CSSStyleRule | null {\n    const styleSheets = document.styleSheets;\n    for (let idx = 0; idx < styleSheets.length; idx += 1) {\n      const styleSheet = styleSheets[idx] as CSSStyleSheet;\n      const rules = styleSheet.cssRules;\n      for (let ruleIdx = 0; ruleIdx < rules.length; ruleIdx += 1) {\n        const rule = rules[ruleIdx] as CSSStyleRule;\n        if (rule.selectorText === selectorText) {\n          return rule;\n        }\n      }\n    }\n    return null;\n  }\n\n  // Don't call resize too quickly\n  doResize = _.debounce(() => {\n    // https://github.com/alonho/angular-plotly/issues/26\n    const e = window.getComputedStyle(this.graphDiv).display;\n    if (!e || 'none' === e) {\n      // not drawn!\n      console.warn('resize a plot that is not drawn yet');\n    } else {\n      const rect = this.graphDiv.getBoundingClientRect();\n      this.layout.width = rect.width;\n      this.layout.height = this.height;\n      Plotly.redraw(this.graphDiv);\n    }\n  }, 50);\n\n  onResize() {\n    if (this.graphDiv && this.layout && Plotly) {\n      this.doResize(); // Debounced\n    }\n  }\n\n  onDataError(err) {\n    this.series = [];\n    this.annotations.clear();\n    this.render();\n  }\n\n  onRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    if (this.graphDiv && this.initialized && Plotly) {\n      Plotly.redraw(this.graphDiv);\n    }\n  }\n\n  onInitEditMode() {\n    this.editor = new EditorHelper(this);\n    this.addEditorTab('Display', 'public/plugins/natel-plotly-panel/partials/tab_display.html', 2);\n    this.addEditorTab('Traces', 'public/plugins/natel-plotly-panel/partials/tab_traces.html', 3);\n    //  this.editorTabIndex = 1;\n    this.onConfigChanged(); // Sets up the axis info\n\n    // Check the size in a little bit\n    setTimeout(() => {\n      console.log('RESIZE in editor');\n      this.onResize();\n    }, 500);\n  }\n\n  processConfigMigration() {\n    console.log('Migrating Plotly Configuration to version: ' + PlotlyPanelCtrl.configVersion);\n\n    // Remove some things that should not be saved\n    const cfg = this.panel.pconfig;\n    delete cfg.layout.plot_bgcolor;\n    delete cfg.layout.paper_bgcolor;\n    delete cfg.layout.autosize;\n    delete cfg.layout.height;\n    delete cfg.layout.width;\n    delete cfg.layout.margin;\n    delete cfg.layout.scene;\n    if (!this.is3d()) {\n      delete cfg.layout.zaxis;\n    }\n\n    // Move from 'markers-lines' to checkbox\n    if (cfg.settings.mode) {\n      const old = cfg.settings.mode;\n      const show = {\n        markers: old.indexOf('markers') >= 0,\n        lines: old.indexOf('lines') >= 0,\n      };\n      _.forEach(cfg.traces, trace => {\n        trace.show = show;\n      });\n      delete cfg.settings.mode;\n    }\n\n    // TODO... MORE Migrations\n    console.log('After Migration:', cfg);\n    this.cfg = cfg;\n    this.panel.version = PlotlyPanelCtrl.configVersion;\n  }\n\n  onPanelInitialized() {\n    if (!this.panel.version || PlotlyPanelCtrl.configVersion > this.panel.version) {\n      this.processConfigMigration();\n    }\n    this._updateTraceData(true);\n  }\n\n  deepCopyWithTemplates = obj => {\n    if (_.isArray(obj)) {\n      return obj.map(val => this.deepCopyWithTemplates(val));\n    } else if (_.isString(obj)) {\n      return this.templateSrv.replace(obj, this.panel.scopedVars);\n    } else if (_.isObject(obj)) {\n      const copy = {};\n      _.forEach(obj, (v, k) => {\n        copy[k] = this.deepCopyWithTemplates(v);\n      });\n      return copy;\n    }\n    return obj;\n  };\n\n  getProcessedLayout() {\n    // Copy from config\n    const layout = this.deepCopyWithTemplates(this.cfg.layout);\n    layout.plot_bgcolor = 'transparent';\n    layout.paper_bgcolor = layout.plot_bgcolor;\n\n    // Update the size\n    const rect = this.graphDiv.getBoundingClientRect();\n    layout.autosize = false; // height is from the div\n    layout.height = this.height;\n    layout.width = rect.width;\n\n    // Make sure it is something\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    // If tickangle is 0, remove it to enable default behaviour,\n    // which is to use 0 if it fits and otherwise 90.\n    if (layout.tickangle === 0) {\n      delete layout.tickangle;\n    }\n\n    // Fixed scales\n    if (this.cfg.fixScale) {\n      if ('x' === this.cfg.fixScale) {\n        layout.yaxis.scaleanchor = 'x';\n      } else if ('y' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'y';\n      } else if ('z' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'z';\n        layout.yaxis.scaleanchor = 'z';\n      }\n    }\n\n    if (this.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n\n      // 3d uses 'scene' for the axis\n      layout.scene = {\n        xaxis: layout.xaxis,\n        yaxis: layout.yaxis,\n        zaxis: layout.zaxis,\n      };\n\n      delete layout.xaxis;\n      delete layout.yaxis;\n      delete layout.zaxis;\n\n      layout.margin = {\n        l: 0,\n        r: 0,\n        t: 0,\n        b: 5,\n        pad: 0,\n      };\n    } else {\n      delete layout.zaxis;\n      delete layout.scene;\n\n      // Check if the X axis should be a date\n      if (!layout.xaxis.type || layout.xaxis.type === 'auto') {\n        const mapping = _.get(this.cfg, 'traces[0].mapping.x');\n        if (mapping && mapping.indexOf('time') >= 0) {\n          layout.xaxis.type = 'date';\n        }\n      }\n\n      const isDate = layout.xaxis.type === 'date';\n      layout.margin = {\n        l: layout.yaxis.title ? 70 : 55,\n        r: 5,\n        t: 0,\n        b: layout.xaxis.title ? 65 : isDate ? 40 : 30,\n        pad: 2,\n      };\n\n      // Add a bit more bottom margin if the tick angle isn't 0.\n      // Leave enough room for at least a 4 digit number running vertically.\n      if (layout.xaxis.tickangle !== 0)\n        layout.margin.b += 20;\n\n      // Set the range to the query window\n      if (isDate && !layout.xaxis.range) {\n        const range = this.timeSrv.timeRange();\n        layout.xaxis.range = [range.from.valueOf(), range.to.valueOf()];\n      }\n\n      // get the css rule of grafana graph axis text\n      const labelStyle = this.getCssRule('div.flot-text');\n      if (labelStyle) {\n        let color = labelStyle.style.color;\n        if (!layout.font) {\n          layout.font = {};\n        }\n        layout.font.color = color;\n\n        // make the grid a little more transparent\n        color = $.color\n          .parse(color)\n          .scale('a', 0.22)\n          .toString();\n\n        // set gridcolor (like grafana graph)\n        layout.xaxis.gridcolor = color;\n        layout.yaxis.gridcolor = color;\n      }\n\n      // Set the second axis\n      layout.yaxis2 = PlotlyPanelCtrl.yaxis2;\n    }\n    return layout;\n  }\n\n  onRender() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode() || !this.graphDiv) {\n      return;\n    }\n\n    if (!Plotly) {\n      return;\n    }\n\n    if (!this.initialized) {\n      const s = this.cfg.settings;\n\n      const options = {\n        showLink: false,\n        displaylogo: false,\n        displayModeBar: s.displayModeBar,\n        modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\n      };\n\n      this.layout = this.getProcessedLayout();\n      this.layout.shapes = this.annotations.shapes;\n      let traces = this.traces;\n      if (this.annotations.shapes.length > 0) {\n        traces = this.traces.concat(this.annotations.trace);\n      }\n      Plotly.react(this.graphDiv, traces, this.layout, options);\n\n      this.graphDiv.on('plotly_click', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n        for (let i = 0; i < data.points.length; i++) {\n          const idx = data.points[i].pointNumber;\n          const ts = this.traces[0].ts[idx];\n          // console.log( 'CLICK!!!', ts, data );\n          const msg = data.points[i].x.toPrecision(4) + ', ' + data.points[i].y.toPrecision(4);\n          this.$rootScope.appEvent('alert-success', [\n            msg,\n            '@ ' + this.dashboard.formatDate(moment(ts)),\n          ]);\n        }\n      });\n\n      // if(true) {\n      //   this.graphDiv.on('plotly_hover', (data, xxx) => {\n      //     console.log( 'HOVER!!!', data, xxx, this.mouse );\n      //     if(data.points.length>0) {\n      //       var idx = 0;\n      //       var pt = data.points[idx];\n\n      //       var body = '<div class=\"graph-tooltip-time\">'+ pt.pointNumber +'</div>';\n      //       body += \"<center>\";\n      //       body += pt.x + ', '+pt.y;\n      //       body += \"</center>\";\n\n      //       //this.$tooltip.html( body ).place_tt( this.mouse.pageX + 10, this.mouse.pageY );\n      //     }\n      //   }).on('plotly_unhover', (data) => {\n      //     //this.$tooltip.detach();\n      //   });\n      // }\n\n      this.graphDiv.on('plotly_selected', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n\n        if (!this.seriesIsTimeseries) {\n          console.log('Not timeseries data, time zoom disabled');\n          return;\n        }\n\n        if (data.points.length === 0) {\n          console.log('Nothing Selected', data);\n          return;\n        }\n\n        console.log('SELECTED', data);\n\n        let min = Number.MAX_SAFE_INTEGER;\n        let max = Number.MIN_SAFE_INTEGER;\n\n        for (let i = 0; i < data.points.length; i++) {\n          const found = data.points[i];\n          const idx = found.pointNumber;\n          const ts = found.fullData.x[idx];\n          min = Math.min(min, ts);\n          max = Math.max(max, ts);\n        }\n\n        // At least 2 seconds\n        min -= 1000;\n        max += 1000;\n\n        const range = {from: moment.utc(min), to: moment.utc(max)};\n\n        console.log('SELECTED!!!', min, max, data.points.length, range);\n\n        this.timeSrv.setTime(range);\n\n        // rebuild the graph after query\n        if (this.graphDiv) {\n          Plotly.Plots.purge(this.graphDiv);\n          this.graphDiv.innerHTML = '';\n          this.initialized = false;\n        }\n      });\n      this.initialized = true;\n    } else if (this.initialized) {\n      Plotly.redraw(this.graphDiv);\n    } else {\n      console.log('Not initialized yet!');\n    }\n  }\n\n  onDataSnapshotLoad(snapshot) {\n    this.onDataReceived(snapshot);\n  }\n\n  _hadAnno = false;\n\n  onDataReceived(dataList) {\n    const finfo: SeriesWrapper[] = [];\n    const autotrace = this.cfg.settings.autotrace;\n    let seriesHash = '/';\n    let autotraceDataSeries = {};\n    if (dataList && dataList.length > 0) {\n      if (autotrace) {\n        // Check input is of expected form.\n        dataList.forEach((series, sidx) => {\n          if (series.columns && series.columns.length === 3 && series.type === 'table') {\n            series.rows.forEach((val) => {\n              const sname = val[0];\n              if (!(sname in autotraceDataSeries)) {\n                autotraceDataSeries[sname] = {\n                  columns: series.columns,\n                  rows: [],\n                  type: 'table',\n                  name: sname,\n                }\n              };\n              autotraceDataSeries[sname].rows.push(val);\n            });\n          } else {\n            console.error('Autotrace needs table input with 3 columns', sidx, series);\n            throw new Error('Autotrace needs table input with 3 columns');\n          }\n        });\n\n        let autotraceDataList: any = [];\n        for (var key in autotraceDataSeries) {\n          autotraceDataList.push(autotraceDataSeries[key]);\n        }\n        this._updateAutoTraces(autotraceDataSeries);\n        dataList = autotraceDataList;\n      }\n\n      const useRefID = dataList.length === this.panel.targets.length;\n      this.seriesIsTimeseries = true;\n      dataList.forEach((series, sidx) => {\n        let refId = '';\n        if (autotrace) {\n          refId = series.name;\n        } else {\n          if (useRefID) {\n            refId = _.get(this.panel, 'targets[' + sidx + '].refId');\n            if (!refId) {\n              refId = String.fromCharCode('A'.charCodeAt(0) + sidx);\n            }\n          }\n        }\n        if (series.columns) {\n          for (let i = 0; i < series.columns.length; i++) {\n            finfo.push(new SeriesWrapperTable(refId, series, i));\n          }\n          finfo.push(new SeriesWrapperTableRow(refId, series));\n        } else if (series.target) {\n          finfo.push(new SeriesWrapperSeries(refId, series, 'value'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'time'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'index'));\n        } else {\n          console.error('Unsupported Series response', sidx, series);\n        }\n        if (series.type === 'table')\n          this.seriesIsTimeseries = false;\n      });\n    }\n    this.seriesByKey.clear();\n    finfo.forEach(s => {\n      s.getAllKeys().forEach(k => {\n        this.seriesByKey.set(k, s);\n        seriesHash += '$' + k;\n      });\n    });\n    this.series = finfo;\n\n    // Now Process the loaded data\n    const hchanged = this.seriesHash !== seriesHash;\n    if (hchanged && this.editor) {\n      EditorHelper.updateMappings(this);\n      this.editor.selectTrace(this.editor.traceIndex);\n      this.editor.onConfigChanged();\n    }\n\n    if (hchanged || !this.initialized) {\n      this.onConfigChanged();\n      this.seriesHash = seriesHash;\n    }\n\n    // Support Annotations\n    let annotationPromise = Promise.resolve();\n    if (!this.cfg.showAnnotations || this.is3d()) {\n      this.annotations.clear();\n      if (this.layout) {\n        if (this.layout.shapes) {\n          this.onConfigChanged();\n        }\n        this.layout.shapes = [];\n      }\n    } else {\n      annotationPromise = this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(results => {\n          const hasAnno = this.annotations.update(results);\n          if (this.layout) {\n            if (hasAnno !== this._hadAnno) {\n              this.onConfigChanged();\n            }\n            this.layout.shapes = this.annotations.shapes;\n          }\n          this._hadAnno = hasAnno;\n        });\n    }\n\n    // Load the real data changes\n    annotationPromise.then(() => {\n      this._updateTraceData();\n      this.render();\n    });\n  }\n\n  __addCopyPath(trace: any, key: string, path: string) {\n    if (key) {\n      trace.__set.push({\n        key: key,\n        path: path,\n      });\n      const s: SeriesWrapper = this.seriesByKey.get(key);\n      if (!s) {\n        this.dataWarnings.push('Unable to find: ' + key + ' for ' + trace.name + ' // ' + path);\n      }\n    }\n  }\n\n  // This will update all trace settings *except* the data\n  _updateTracesFromConfigs() {\n    // If we're in autotrace mode, trace creation happens elsewhere.\n    if (this.cfg.settings.autotrace)\n      return;\n\n    this.dataWarnings = [];\n\n    // Make sure we have a trace\n    if (this.cfg.traces == null || this.cfg.traces.length < 1) {\n      this.cfg.traces = [_.cloneDeep(PlotlyPanelCtrl.defaultTrace)];\n    }\n\n    const is3D = this.is3d();\n    const isBar = this.isBar();\n    this.traces = this.cfg.traces.map((tconfig, idx) => {\n      const config = this.deepCopyWithTemplates(tconfig) || {};\n      _.defaults(config, PlotlyPanelCtrl.defaults);\n      const mapping = config.mapping;\n\n      const trace: any = {\n        name: config.name || EditorHelper.createTraceName(idx),\n        type: this.cfg.settings.type,\n        orientation: this.cfg.settings.orientation,\n        __set: [], // { key:? property:? }\n      };\n\n      if (isBar) {\n        trace.marker = config.settings.barmarker;\n      } else {\n        let mode = '';\n        if (config.show.markers) {\n          mode += '+markers';\n          trace.marker = config.settings.marker;\n\n          delete trace.marker.sizemin;\n          delete trace.marker.sizemode;\n          delete trace.marker.sizeref;\n\n          if (config.settings.color_option === 'ramp') {\n            this.__addCopyPath(trace, mapping.color, 'marker.color');\n          } else {\n            delete trace.marker.colorscale;\n            delete trace.marker.showscale;\n          }\n        }\n\n        if (config.show.lines) {\n          mode += '+lines';\n          trace.line = config.settings.line;\n        }\n\n        if (is3D) {\n          this.__addCopyPath(trace, mapping.z, 'z');\n        }\n\n        // Set the trace mode\n        if (mode) {\n          trace.mode = mode.substring(1);\n        }\n      }\n\n      // Set the text\n      this.__addCopyPath(trace, mapping.text, 'text');\n      this.__addCopyPath(trace, mapping.x, 'x');\n      this.__addCopyPath(trace, mapping.y, 'y');\n\n      return trace;\n    });\n  }\n\n  // Autotrace. Recreate the traces to those found in the data.\n  _updateAutoTraces(series) {\n    this.dataWarnings = [];\n\n    delete this.traces;\n\n    this.traces = [];\n\n    for (var key in series) {\n      const trace: any = {\n        name: key,\n        type: this.cfg.settings.type,\n        orientation: this.cfg.settings.orientation,\n        __set: [], // { key:? property:? }\n      };\n\n      // Set the text\n      this.__addCopyPath(trace, key + '/' + series[key].columns[1].text, 'x');\n      this.__addCopyPath(trace, key + '/' + series[key].columns[2].text, 'y');\n      if (trace.orientation === 'v')\n        this.__addCopyPath(trace, key + '/' + series[key].columns[2].text, 'text');\n      else\n        this.__addCopyPath(trace, key + '/' + series[key].columns[1].text, 'text');\n\n      this.traces.push(trace);\n    }\n\n    if (this.traces.length < 1) {\n      this.traces = [_.cloneDeep(PlotlyPanelCtrl.defaultTrace)];\n    }\n  }\n\n  // Fills in the required data into the trace values\n  _updateTraceData(force = false): boolean {\n    if (!this.series) {\n      // console.log('No series data yet!');\n      return false;\n    }\n\n    if (force || !this.traces) {\n      this._updateTracesFromConfigs();\n    } else if (!this.cfg.settings.autotrace && this.traces.length !== this.cfg.traces.length) {\n      console.log(\n        'trace number mismatch.  Found: ' +\n          this.traces.length +\n          ', expect: ' +\n          this.cfg.traces.length\n      );\n      this._updateTracesFromConfigs();\n    }\n\n    // Use zero when the metric value is missing\n    // Plotly gets lots of errors when the values are missing\n    let zero: any = [];\n    this.traces.forEach(trace => {\n      if (trace.__set) {\n        trace.__set.forEach(v => {\n          const s = this.seriesByKey.get(v.key);\n          let vals: any[] = zero;\n          if (s) {\n            vals = s.toArray();\n            if (vals && vals.length > zero.length) {\n              zero = Array.from(Array(3), () => 0);\n            }\n          } else {\n            if (!this.error) {\n              this.error = '';\n            }\n            this.error += 'Unable to find: ' + v.key + ' (using zeros).  ';\n          }\n          if (!vals) {\n            vals = zero;\n          }\n          _.set(trace, v.path, vals);\n        });\n      }\n    });\n\n    //console.log('SetDATA', this.traces);\n    return true;\n  }\n\n  onConfigChanged() {\n    // Force reloading the traces\n    this._updateTraceData(true);\n\n    if (!Plotly) {\n      return;\n    }\n\n    // Check if the plotly library changed\n    loadIfNecessary(this.cfg).then(res => {\n      if (res) {\n        if (Plotly) {\n          Plotly.purge(this.graphDiv);\n        }\n        Plotly = res;\n      }\n\n      // Updates the layout and redraw\n      if (this.initialized && this.graphDiv) {\n        if (!this.cfg.showAnnotations) {\n          this.annotations.clear();\n        }\n\n        const s = this.cfg.settings;\n        const options = {\n          showLink: false,\n          displaylogo: false,\n          displayModeBar: s.displayModeBar,\n          modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\n        };\n        this.layout = this.getProcessedLayout();\n        this.layout.shapes = this.annotations.shapes;\n        let traces = this.traces;\n        if (this.annotations.shapes.length > 0) {\n          traces = this.traces.concat(this.annotations.trace);\n        }\n        Plotly.react(this.graphDiv, traces, this.layout, options);\n      }\n\n      this.render(); // does not query again!\n    });\n  }\n\n  is3d() {\n    return this.cfg.settings.type === 'scatter3d';\n  }\n\n  isBar() {\n    return this.cfg.settings.type === 'bar';\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    this.graphDiv = elem.find('.plotly-spot')[0];\n    this.initialized = false;\n    elem.on('mousemove', evt => {\n      this.mouse = evt;\n    });\n\n    //let p = $(this.graphDiv).parent().parent()[0];\n    //console.log( 'PLOT', this.graphDiv, p );\n  }\n}\n\nexport {PlotlyPanelCtrl, PlotlyPanelCtrl as PanelCtrl};\n","import _ from 'lodash';\n\n// This gives a standard way to get a value for a given field\nexport abstract class SeriesWrapper {\n  refId: string; // From Query Target\n  name: string;\n\n  type?: 'string' | 'date' | 'boolean' | 'epoch' | 'number';\n  first?: any;\n  count: number;\n\n  /** @ngInject */\n  constructor(refId: string) {\n    this.refId = refId;\n  }\n\n  protected setFirst(v: any) {\n    this.first = v;\n    if (_.isNumber(v)) {\n      this.type = 'number';\n    } else if (_.isString(v)) {\n      this.type = 'string';\n    } else if (typeof v === typeof true) {\n      this.type = 'boolean';\n    }\n  }\n\n  // The best key for this field\n  getKey(): string {\n    return this.name;\n  }\n\n  // All ways to access this field\n  getAllKeys(): string[] {\n    return [this.getKey()];\n  }\n\n  abstract toArray(): Array<string | number | boolean>;\n}\n\nexport class SeriesWrapperSeries extends SeriesWrapper {\n  value: 'value' | 'index' | 'time';\n\n  /** @ngInject */\n  constructor(refId: string, public series: any, val: 'value' | 'index' | 'time') {\n    super(refId);\n    this.value = val;\n    this.count = series.datapoints.length;\n    this.name = series.target;\n\n    if ('index' === val) {\n      this.first = 0;\n      this.type = 'number';\n      this.name += '@index';\n      return;\n    }\n    if ('value' === val) {\n      _.forEach(series.datapoints, arr => {\n        if (arr[0] !== null) {\n          // 0 is an ok value so cant use if(arr[0])\n          this.setFirst(arr[0]);\n          return false;\n        }\n        return true; // continue\n      });\n      return;\n    }\n    if ('time' === val) {\n      this.type = 'epoch';\n      this.first = series.datapoints[0][1];\n      this.name += '@time';\n      return;\n    }\n  }\n\n  toArray(): any[] {\n    if ('index' === this.value) {\n      const arr = new Array(this.count);\n      for (let i = 0; i < this.count; i++) {\n        arr[i] = i;\n      }\n      return arr;\n    }\n    const idx = 'time' === this.value ? 1 : 0;\n    return _.map(this.series.datapoints, arr => {\n      return arr[idx];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      const vals = [this.name, this.refId + '@' + this.value, this.refId + '/' + this.name];\n\n      if ('A' === this.refId) {\n        vals.push('@' + this.value);\n      }\n      return vals;\n    }\n    return [this.name];\n  }\n}\n\nexport class SeriesWrapperTableRow extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any) {\n    super(refId);\n\n    this.name = refId + '@row';\n  }\n\n  toArray(): any[] {\n    const count = this.table.rows.length;\n    const arr = new Array(count);\n    for (let i = 0; i < count; i++) {\n      arr[i] = i;\n    }\n    return arr;\n  }\n}\n\nexport class SeriesWrapperTable extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any, public index: number) {\n    super(refId);\n    this.count = table.rows.length;\n\n    const col = table.columns[index];\n    if (!col) {\n      throw new Error('Unknown Column: ' + index);\n    }\n\n    this.name = col.text;\n    if ('time' === col.type) {\n      this.type = 'epoch';\n      this.first = table.rows[0][index];\n    } else {\n      for (let i = 0; i < this.count; i++) {\n        const v = table.rows[i][index];\n        if (v !== null) {\n          // 0 is an ok value so cant use if(v)\n          this.setFirst(v);\n          return;\n        }\n      }\n    }\n  }\n\n  toArray(): any[] {\n    return _.map(this.table.rows, row => {\n      return row[this.index];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      return [this.getKey(), this.refId + '/' + this.name, this.refId + '[' + this.index + ']'];\n    }\n    return [this.getKey()];\n  }\n}\n","import _ from 'lodash';\n\nimport {PlotlyPanelCtrl} from './module';\n\nclass AxisInfo {\n  label: string;\n  layout: any; // The config saved in layout\n  property: string; // mapping property to check in a trace\n  segment: any; // The Grafana <metric-segment\n}\n\nconst REMOVE_KEY = '-- remove --';\n\nexport class EditorHelper {\n  axis = new Array<AxisInfo>();\n  trace: any; // Trace Config\n  traceIndex = 0;\n  traces: any[]; // array of configs;\n\n  symbol: any; // The Grafana <metric-segment for this symbol\n  mapping: any = {}; // The Grafana <metric-segment for this symbol\n\n  /** @ngInject */\n  constructor(public ctrl: PlotlyPanelCtrl) {\n    EditorHelper.updateMappings(ctrl);\n    this.selectTrace(0);\n  }\n\n  // Callback when the query results changed\n  static updateMappings(ctrl: PlotlyPanelCtrl): boolean {\n    if (ctrl.series == null || ctrl.series.length < 1) {\n      return false;\n    }\n\n    const defaultMappings = {\n      first: ctrl.series[0].getKey(),\n      time: ctrl.series[1].getKey(),\n    };\n\n    let changed = false;\n    ctrl.cfg.traces.forEach(trace => {\n      _.defaults(trace, PlotlyPanelCtrl.defaultTrace);\n      const mapping = trace.mapping;\n      if (!mapping.color) {\n        mapping.color = defaultMappings.first;\n        changed = true;\n      }\n      if (!mapping.x) {\n        mapping.x = defaultMappings.time;\n        changed = true;\n      }\n      if (!mapping.y) {\n        mapping.y = defaultMappings.first;\n        changed = true;\n      }\n      if (ctrl.is3d() && !mapping.z) {\n        mapping.z = defaultMappings.first;\n        changed = true;\n      }\n    });\n    return changed;\n  }\n\n  onConfigChanged() {\n    this.onUpdateAxis(); // Every time????\n\n    // Initalize the axis\n    for (let i = 0; i < this.axis.length; i++) {\n      if (this.axis[i].layout.rangemode === 'between') {\n        if (!_.isArray(this.axis[i].layout.range)) {\n          this.axis[i].layout.range = [0, null];\n        }\n      } else {\n        delete this.axis[i].layout.range;\n      }\n    }\n\n    this.ctrl.onConfigChanged();\n  }\n\n  onUpdateAxis() {\n    const mapping = this.trace.mapping;\n    if (!mapping) {\n      console.error('Missing mappings for trace', this.trace);\n      return;\n    }\n\n    const layout = this.ctrl.cfg.layout;\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    this.axis = [];\n    this.axis.push({\n      label: 'X Axis',\n      layout: layout.xaxis,\n      property: 'x',\n      segment: this.mapping.x,\n    });\n    this.axis.push({\n      label: 'Y Axis',\n      layout: layout.yaxis,\n      property: 'y',\n      segment: this.mapping.y,\n    });\n\n    if (this.ctrl.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n      this.axis.push({\n        label: 'Z Axis',\n        layout: layout.zaxis,\n        property: 'z',\n        segment: this.mapping.z,\n      });\n    }\n  }\n\n  //-----------------------------------------------------------------------\n  // Manage Traces\n  //-----------------------------------------------------------------------\n\n  selectTrace(index: number) {\n    this.traces = this.ctrl.cfg.traces;\n    if (!this.traces || this.traces.length < 1) {\n      this.traces = this.ctrl.cfg.traces = [_.deepClone(PlotlyPanelCtrl.defaultTrace)];\n    }\n    if (index >= this.ctrl.cfg.traces.length) {\n      index = this.ctrl.cfg.traces.length - 1;\n    }\n    this.trace = this.ctrl.cfg.traces[index];\n    this.traceIndex = index;\n\n    _.defaults(this.trace, PlotlyPanelCtrl.defaultTrace);\n    if (!this.trace.name) {\n      this.trace.name = EditorHelper.createTraceName(index);\n    }\n\n    // The _defaults makes sure this is taken care of\n    this.symbol = this.ctrl.uiSegmentSrv.newSegment({\n      value: this.trace.settings.marker.symbol,\n    });\n\n    // Now set one for each key\n    this.mapping = {};\n    _.forEach(this.trace.mapping, (value, key) => {\n      this.updateSegMapping(value, key);\n    });\n\n    console.log('Editor Info', this);\n\n    this.onConfigChanged();\n    this.ctrl.refresh();\n  }\n\n  private updateSegMapping(value, key, updateTrace = false) {\n    if (REMOVE_KEY === value) {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n      value = null; // will set this value later\n    } else if (value) {\n      const s = this.ctrl.seriesByKey.get(value);\n      const opts: any = {\n        value: value,\n        series: s,\n      };\n      if (!s) {\n        //  opts.fake = true;\n        opts.html = value + '  <i class=\"fa fa-exclamation-triangle\"></i>';\n      }\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment(opts);\n    } else {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n    }\n\n    if (updateTrace) {\n      this.trace.mapping[key] = value;\n      console.log('SET', key, value, this.trace.mapping);\n    }\n  }\n\n  createTrace() {\n    let trace: any = {};\n    if (this.ctrl.cfg.traces.length > 0) {\n      trace = _.cloneDeep(this.ctrl.cfg.traces[this.ctrl.cfg.traces.length - 1]);\n    } else {\n      trace = _.deepClone(PlotlyPanelCtrl.defaultTrace);\n    }\n    trace.name = EditorHelper.createTraceName(this.ctrl.traces.length);\n    this.ctrl.cfg.traces.push(trace);\n    this.selectTrace(this.ctrl.cfg.traces.length - 1);\n  }\n\n  removeCurrentTrace() {\n    // TODO... better behavior\n    if (this.traces.length <= 1) {\n      console.error('Wont remove a single trace', this);\n      return;\n    }\n\n    for (let i = 0; i < this.traces.length; i++) {\n      if (this.trace === this.traces[i]) {\n        this.traces.splice(i, 1);\n        if (i >= this.traces.length) {\n          i = this.traces.length - 1;\n        }\n        this.ctrl.onConfigChanged();\n        this.ctrl._updateTraceData(true);\n        this.selectTrace(i);\n        this.ctrl.refresh();\n        return;\n      }\n    }\n\n    console.error('Could not find', this);\n  }\n\n  static createTraceName(idx: number) {\n    return 'Trace ' + (idx + 1);\n  }\n\n  //-----------------------------------------------------------------------\n  // SERIES\n  //-----------------------------------------------------------------------\n\n  getSeriesSegs(withRemove = false): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const series: any[] = [];\n\n      if (withRemove) {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            fake: true,\n            value: REMOVE_KEY,\n            series: null,\n          })\n        );\n      }\n      this.ctrl.series.forEach(s => {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            value: s.name,\n            series: s,\n          })\n        );\n      });\n\n      //console.log('GET Segments:', withRemove, series);\n      //console.log('ALL Series:', this.ctrl.series);\n      resolve(series);\n    });\n  }\n\n  onAxisSeriesChanged(axis: AxisInfo) {\n    this.updateSegMapping(axis.segment.value, axis.property, true);\n    this.onConfigChanged();\n  }\n\n  getTextSegments(): any[] {\n    return [this.mapping.text];\n  }\n\n  onTextMetricChanged(sss: any) {\n    const seg = this.mapping.text;\n    this.updateSegMapping(seg.value, 'text', true);\n    this.onConfigChanged();\n  }\n\n  getColorSegments(): any[] {\n    if (this.trace.settings.color_option === 'ramp') {\n      return [this.mapping.color];\n    }\n    return [];\n  }\n\n  onColorChanged() {\n    const seg = this.mapping.color;\n    this.updateSegMapping(seg.value, 'color', true);\n    this.onConfigChanged();\n  }\n\n  //-----------------------------------------------------------------------\n  // SYMBOLS\n  //-----------------------------------------------------------------------\n\n  onSymbolChanged() {\n    this.trace.settings.marker.symbol = this.symbol.value;\n    this.onConfigChanged();\n  }\n\n  getSymbolSegs(): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const txt = [\n        'circle',\n        'circle-open',\n        'circle-dot',\n        'circle-open-dot',\n        'square',\n        'square-open',\n        'square-dot',\n        'square-open-dot',\n        'diamond',\n        'diamond-open',\n        'diamond-dot',\n        'diamond-open-dot',\n        'cross',\n        'cross-open',\n        'cross-dot',\n        'cross-open-dot',\n        'x',\n        'x-open',\n        'x-dot',\n        'x-open-dot',\n        'triangle-up',\n        'triangle-up-open',\n        'triangle-up-dot',\n        'triangle-up-open-dot',\n        'triangle-down',\n        'triangle-down-open',\n        'triangle-down-dot',\n        'triangle-down-open-dot',\n        'triangle-left',\n        'triangle-left-open',\n        'triangle-left-dot',\n        'triangle-left-open-dot',\n        'triangle-right',\n        'triangle-right-open',\n        'triangle-right-dot',\n        'triangle-right-open-dot',\n        'triangle-ne',\n        'triangle-ne-open',\n        'triangle-ne-dot',\n        'triangle-ne-open-dot',\n        'triangle-se',\n        'triangle-se-open',\n        'triangle-se-dot',\n        'triangle-se-open-dot',\n        'triangle-sw',\n        'triangle-sw-open',\n        'triangle-sw-dot',\n        'triangle-sw-open-dot',\n        'triangle-nw',\n        'triangle-nw-open',\n        'triangle-nw-dot',\n        'triangle-nw-open-dot',\n        'pentagon',\n        'pentagon-open',\n        'pentagon-dot',\n        'pentagon-open-dot',\n        'hexagon',\n        'hexagon-open',\n        'hexagon-dot',\n        'hexagon-open-dot',\n        'hexagon2',\n        'hexagon2-open',\n        'hexagon2-dot',\n        'hexagon2-open-dot',\n        'octagon',\n        'octagon-open',\n        'octagon-dot',\n        'octagon-open-dot',\n        'star',\n        'star-open',\n        'star-dot',\n        'star-open-dot',\n        'hexagram',\n        'hexagram-open',\n        'hexagram-dot',\n        'hexagram-open-dot',\n        'star-triangle-up',\n        'star-triangle-up-open',\n        'star-triangle-up-dot',\n        'star-triangle-up-open-dot',\n        'star-triangle-down',\n        'star-triangle-down-open',\n        'star-triangle-down-dot',\n        'star-triangle-down-open-dot',\n        'star-square',\n        'star-square-open',\n        'star-square-dot',\n        'star-square-open-dot',\n        'star-diamond',\n        'star-diamond-open',\n        'star-diamond-dot',\n        'star-diamond-open-dot',\n        'diamond-tall',\n        'diamond-tall-open',\n        'diamond-tall-dot',\n        'diamond-tall-open-dot',\n        'diamond-wide',\n        'diamond-wide-open',\n        'diamond-wide-dot',\n        'diamond-wide-open-dot',\n        'hourglass',\n        'hourglass-open',\n        'bowtie',\n        'bowtie-open',\n        'circle-cross',\n        'circle-cross-open',\n        'circle-x',\n        'circle-x-open',\n        'square-cross',\n        'square-cross-open',\n        'square-x',\n        'square-x-open',\n        'diamond-cross',\n        'diamond-cross-open',\n        'diamond-x',\n        'diamond-x-open',\n        'cross-thin',\n        'cross-thin-open',\n        'x-thin',\n        'x-thin-open',\n        'asterisk',\n        'asterisk-open',\n        'hash',\n        'hash-open',\n        'hash-dot',\n        'hash-open-dot',\n        'y-up',\n        'y-up-open',\n        'y-down',\n        'y-down-open',\n        'y-left',\n        'y-left-open',\n        'y-right',\n        'y-right-open',\n        'line-ew',\n        'line-ew-open',\n        'line-ns',\n        'line-ns-open',\n        'line-ne',\n        'line-ne-open',\n        'line-nw',\n        'line-nw-open',\n      ];\n\n      const segs: any[] = [];\n      _.forEach(txt, val => {\n        segs.push(this.ctrl.uiSegmentSrv.newSegment(val));\n      });\n      resolve(segs);\n    });\n  }\n}\n","import $script from 'scriptjs';\n\nlet loaded: any; // Plotly Library\nlet isFull = false;\nlet wasCDN = false;\n\nexport function loadPlotly(cfg: any): Promise<any> {\n  if (loaded) {\n    console.log('using already loaded value');\n    return Promise.resolve(loaded);\n  }\n\n  const needsFull = cfg.settings.type === 'scatter3d';\n  let url = 'public/plugins/natel-plotly-panel/lib/plotly-cartesian.min.js';\n  if (cfg.loadFromCDN) {\n    url = needsFull\n      ? 'https://cdn.plot.ly/plotly-latest.min.js'\n      : 'https://cdn.plot.ly/plotly-cartesian-latest.min.js';\n  } else if (needsFull) {\n    url = 'public/plugins/natel-plotly-panel/lib/plotly.min.js';\n  }\n  return new Promise((resolve, reject) => {\n    $script(url, resolve);\n  }).then(res => {\n    isFull = needsFull;\n    wasCDN = cfg.loadFromCDN;\n    loaded = window['Plotly'];\n    return loaded;\n  });\n}\n\nexport function loadIfNecessary(cfg: any): Promise<any> {\n  if (!loaded) {\n    return loadPlotly(cfg);\n  }\n\n  if (wasCDN !== cfg.loadFromCDN) {\n    console.log('Use CDN', cfg.loadFromCDN);\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  const needsFull = cfg.settings.type === 'scatter3d';\n  if (needsFull && !isFull) {\n    console.log('Switching to the full plotly library');\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  // No changes\n  return Promise.resolve(null);\n}\n","/*!\n  * $script.js JS loader & dependency manager\n  * https://github.com/ded/script.js\n  * (c) Dustin Diaz 2014 | License MIT\n  */\n\n(function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else this[name] = definition()\n})('$script', function () {\n  var doc = document\n    , head = doc.getElementsByTagName('head')[0]\n    , s = 'string'\n    , f = false\n    , push = 'push'\n    , readyState = 'readyState'\n    , onreadystatechange = 'onreadystatechange'\n    , list = {}\n    , ids = {}\n    , delay = {}\n    , scripts = {}\n    , scriptpath\n    , urlArgs\n\n  function every(ar, fn) {\n    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f\n    return 1\n  }\n  function each(ar, fn) {\n    every(ar, function (el) {\n      fn(el)\n      return 1\n    })\n  }\n\n  function $script(paths, idOrDone, optDone) {\n    paths = paths[push] ? paths : [paths]\n    var idOrDoneIsDone = idOrDone && idOrDone.call\n      , done = idOrDoneIsDone ? idOrDone : optDone\n      , id = idOrDoneIsDone ? paths.join('') : idOrDone\n      , queue = paths.length\n    function loopFn(item) {\n      return item.call ? item() : list[item]\n    }\n    function callback() {\n      if (!--queue) {\n        list[id] = 1\n        done && done()\n        for (var dset in delay) {\n          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])\n        }\n      }\n    }\n    setTimeout(function () {\n      each(paths, function loading(path, force) {\n        if (path === null) return callback()\n        \n        if (!force && !/^https?:\\/\\//.test(path) && scriptpath) {\n          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;\n        }\n        \n        if (scripts[path]) {\n          if (id) ids[id] = 1\n          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)\n        }\n\n        scripts[path] = 1\n        if (id) ids[id] = 1\n        create(path, callback)\n      })\n    }, 0)\n    return $script\n  }\n\n  function create(path, fn) {\n    var el = doc.createElement('script'), loaded\n    el.onload = el.onerror = el[onreadystatechange] = function () {\n      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;\n      el.onload = el[onreadystatechange] = null\n      loaded = 1\n      scripts[path] = 2\n      fn()\n    }\n    el.async = 1\n    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;\n    head.insertBefore(el, head.lastChild)\n  }\n\n  $script.get = create\n\n  $script.order = function (scripts, id, done) {\n    (function callback(s) {\n      s = scripts.shift()\n      !scripts.length ? $script(s, id, done) : $script(s, callback)\n    }())\n  }\n\n  $script.path = function (p) {\n    scriptpath = p\n  }\n  $script.urlArgs = function (str) {\n    urlArgs = str;\n  }\n  $script.ready = function (deps, ready, req) {\n    deps = deps[push] ? deps : [deps]\n    var missing = [];\n    !each(deps, function (dep) {\n      list[dep] || missing[push](dep);\n    }) && every(deps, function (dep) {return list[dep]}) ?\n      ready() : !function (key) {\n      delay[key] = delay[key] || []\n      delay[key][push](ready)\n      req && req(missing)\n    }(deps.join('|'))\n    return $script\n  }\n\n  $script.done = function (idOrDone) {\n    $script([null], idOrDone)\n  }\n\n  return $script\n});\n","import {Shape, Data} from 'plotly.js';\n\nexport class AnnoInfo {\n  trace: Data;\n  shapes: Shape[];\n\n  constructor() {\n    this.clear();\n  }\n\n  clear() {\n    this.shapes = [];\n    this.trace = {\n      mode: 'markers',\n      type: 'scatter',\n      hoverinfo: 'x+text',\n      x: [],\n      y: [],\n      text: [],\n      yaxis: 'y2',\n      marker: {\n        size: 15,\n        symbol: 'triangle-up',\n        color: [],\n      },\n    };\n  }\n\n  update(results: any): boolean {\n    if (!results || !results.annotations) {\n      this.clear();\n      return false;\n    }\n\n    const x: number[] = [];\n    const y: number[] = [];\n    const text: string[] = [];\n    const color: string[] = [];\n\n    this.shapes = results.annotations.map(a => {\n      x.push(a.time);\n      y.push(0);\n      text.push('XXXX');\n      color.push(a.annotation.iconColor);\n\n      return {\n        type: 'line', // rect\n        xref: 'x',\n        yref: 'paper',\n        x0: a.time,\n        y0: 0,\n        x1: a.time,\n        y1: 1,\n\n        visible: true,\n        layer: 'above',\n\n        fillcolor: a.annotation.iconColor,\n        opacity: 0.8,\n        line: {\n          color: a.annotation.iconColor,\n          width: 1,\n          dash: 'dash',\n        },\n      } as Shape;\n    });\n\n    // Overwrite it with new points\n    this.trace = {...this.trace, x, y, text};\n    this.trace.marker!.color = color;\n    return x.length > 0;\n  }\n}\n"],"sourceRoot":""}